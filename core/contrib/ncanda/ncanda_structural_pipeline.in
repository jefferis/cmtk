#!/bin/bash

##
##  Copyright 2012 SRI International
##
##  This file is part of the Computational Morphometry Toolkit.
##
##  http://www.nitrc.org/projects/cmtk/
##
##  The Computational Morphometry Toolkit is free software: you can
##  redistribute it and/or modify it under the terms of the GNU General Public
##  License as published by the Free Software Foundation, either version 3 of
##  the License, or (at your option) any later version.
##
##  The Computational Morphometry Toolkit is distributed in the hope that it
##  will be useful, but WITHOUT ANY WARRANTY; without even the implied
##  warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##  GNU General Public License for more details.
##
##  You should have received a copy of the GNU General Public License along
##  with the Computational Morphometry Toolkit.  If not, see
##  <http://www.gnu.org/licenses/>.
##
##  $Revision: 4473 $
##
##  $LastChangedDate: 2012-08-08 14:51:14 -0700 (Wed, 08 Aug 2012) $
##
##  $LastChangedBy: torsten_at_home $
##

CMTK_BINARY_DIR=@CMTK_BINARY_DIR_CONFIG@
CMTK_DATA_DIR=@CMTK_DATA_DIR_CONFIG@
TEMPLATE_DIR=@TEMPLATE_DIR_CONFIG@
 
# Get the cmtk_functions.sh script from the scripts/ directory in the CMTK source tree
. ${CMTK_BINARY_DIR}/cmtk_functions.sh
. ${CMTK_BINARY_DIR}/ncanda_setup.sh

#
# Setup input and output
#

export OUTDIR=$1
export INPUT_T1=$2
export INPUT_T2=$3

#
# 1 - Bias field correcton
#

mrbias()
{
    local chn=$1
    local inp=$2

    local mrbias_args="$3"

    local out=${OUTDIR}/mrbias/${chn}.nii
    local msk=${OUTDIR}/mrbias/${chn}_mask.nii

    if needs_update_and_lock ${out} ${inp}; then
	# make foreground mask
	local tmpdir=`mktemp -d`
	cmtk registrationx ${CMTK_GLOBAL_ARGS} --omit-original-data --dofs 6,9,12 --auto-multi-levels 5 --ncc --prune-histogram-ref 128 --init com -o ${tmpdir}/xform ${inp} ${CMTK_DATA_DIR}/sri24/sri24_${chn}_whole.nii
	cmtk reformatx ${CMTK_GLOBAL_ARGS} -o ${tmpdir}/mask.nii --pv --floating ${CMTK_DATA_DIR}/sri24/sri24_brainmask.nii ${inp} ${tmpdir}/xform
	cmtk convertx ${CMTK_GLOBAL_ARGS} --dilate 5 ${tmpdir}/mask.nii ${msk}
	rm -rf ${tmpdir}

	# run bias field correction
	cmtk mrbias ${CMTK_GLOBAL_ARGS} ${mrbias_args} -M 2 --log-intensities --mask ${msk} ${inp} ${out}
	lockfile_delete ${out}
    fi
}

mrbias t1 ${INPUT_T1} "--sampling-density 0.025"
mrbias t2 ${INPUT_T2} "--sampling-density 0.01"

export t1_mrbias=`get_override_file ${OUTDIR}/mrbias/t1.nii`
export t2_mrbias=`get_override_file ${OUTDIR}/mrbias/t2.nii`

#
# 2 - Align T1 and T2 weighted images
#

t1t2_affine=${OUTDIR}/registration/t1_t2/affine.xform
if needs_update ${t1t2_affine}; then
    cmtk registrationx ${CMTK_GLOBAL_ARGS} --dofs 6,9,12 --auto-multi-levels 4 --init physical -o ${t1t2_affine} ${t1_mrbias} ${t2_mrbias}
    lockfile_delete ${t1t2_affine}
fi
export t1t2_affine=`get_override_file ${t1t2_affine}`

#
# 3 - T2 image skull stripping
#

[ -d ${OUTDIR}/stripped ] || mkdir -p ${OUTDIR}/stripped

# run this on the pre-bias-corrected image - sometimes bias correction interferes with brain extraction
t2_mask=${OUTDIR}/stripped/t2_mask.nii
if needs_update_and_lock ${t2_mask} ${t2_mrbias}; then
    fsl bet ${INPUT_T2} ${OUTDIR}/stripped/t2 -R -f 0.5 -g +0.0 -m -n -v
    lockfile_delete ${t2_mask}
fi
export t2_mask=`get_override_file ${t2_mask}`

t2_brain=${OUTDIR}/stripped/t2_brain.nii
if needs_update_and_lock ${t2_brain} ${t2_mask}; then
    cmtk convertx ${CMTK_GLOBAL_ARGS} --set-padding 0 --mask ${t2_mask} ${t2_mrbias} ${t2_brain}
    lockfile_delete ${t2_brain}
fi
export t2_brain=`get_override_file ${t2_brain}`

t2_skull=${OUTDIR}/stripped/t2_skull.nii
if needs_update_and_lock ${t2_skull} ${t2_mask}; then
    cmtk convertx ${CMTK_GLOBAL_ARGS} --set-padding 0 --mask-inverse ${t2_mask} ${t2_mrbias} ${t2_skull}
    lockfile_delete ${t2_skull}
fi
export t2_skull=`get_override_file ${t2_skull}`

#
# 4 - map T2 mask to T1 image
#

t1_mask=${OUTDIR}/stripped/t1_mask.nii
if needs_update_and_lock ${t1_mask} ${t2_mask} ${t1t2_affine}; then
    cmtk reformatx ${CMTK_GLOBAL_ARGS} --pv -o ${t1_mask} --floating ${t2_mask} ${t1_mrbias} ${t1t2_affine}
    lockfile_delete ${t1_mask}
fi
export t1_mask=`get_override_file ${t1_mask}`

t1_brain=${OUTDIR}/stripped/t1_brain.nii
if needs_update_and_lock ${t1_brain} ${t1_mask}; then
    cmtk convertx ${CMTK_GLOBAL_ARGS} --set-padding 0 --mask ${t1_mask} ${t1_mrbias} ${t1_brain}
    lockfile_delete ${t1_brain}
fi
export t1_brain=`get_override_file ${t1_brain}`

t1_skull=${OUTDIR}/stripped/t1_skull.nii
if needs_update_and_lock ${t1_skull} ${t1_mask}; then
    cmtk convertx ${CMTK_GLOBAL_ARGS} --set-padding 0 --mask-inverse ${t1_mask} ${t1_mrbias} ${t1_skull}
    lockfile_delete ${t1_skull}
fi
export t1_skull=`get_override_file ${t1_skull}`

#
# 5 - affine alignment with SRI24 atlas
#

sri24_t1=${CMTK_DATA_DIR}/sri24/sri24_t1.nii

t1_sri24_affine=${OUTDIR}/registration/sri24/affine/t1_atlas.xform
if needs_update_and_lock ${t1_sri24_affine} ${t1_brain}; then
    cmtk registrationx ${CMTK_GLOBAL_ARGS} --dofs 6,9,12 --auto-multi-levels 5 --ncc --init com -o ${t1_sri24_affine} ${t1_brain} ${sri24_t1}
    lockfile_delete ${t1_sri24_affine}
fi
export t1_sri24_affine=`get_override_file ${t1_sri24_affine}`

#
# 6 - nonrigid alignment with SRI24 atlas
#

t1_sri24_warp_args="-e 16 --coarsest 4 --sampling 2 --accuracy 0.1 --grid-spacing 40 --refine 4 --delay-refine --energy-weight 1e-3"

t1_sri24_warp=${OUTDIR}/registration/sri24/warp/t1_atlas.xform
if needs_update_and_lock ${t1_sri24_warp} ${t1_sri24_affine}; then
    cmtk warp ${CMTK_GLOBAL_ARGS} ${t1_sri24_warp_args} -o ${t1_sri24_warp} ${t1_sri24_affine}
    lockfile_delete ${t1_sri24_warp}
fi
t1_sri24_warp=`get_override_file ${t1_sri24_warp}`

sri24_t1_warp=${OUTDIR}/registration/sri24/warp/atlas_t1.xform
if needs_update_and_lock ${sri24_t1_warp} ${t1_sri24_affine}; then
    cmtk warp ${CMTK_GLOBAL_ARGS} ${t1_sri24_warp_args} -o ${sri24_t1_warp} --switch ${t1_sri24_affine}
    lockfile_delete ${sri24_t1_warp}
fi
export sri24_t1_warp=`get_override_file ${sri24_t1_warp}`

#
# 7 - reformat SRI24 parcellation maps
#

PARCELLATIONS="parc116plus_novent"
for parc in ${PARCELLATIONS}; do
    inp=${CMTK_DATA_DIR}/sri24/parcellation/sri24_${parc}.nii
    out=${OUTDIR}/reformat/subject_t1/sri24_direct/${parc}.nii

    if needs_update_and_lock ${out} ${inp} ${t1_sri24_warp}; then
	cmtk reformatx ${CMTK_GLOBAL_ARGS} --pv -o ${out} --floating ${inp} ${t1_brain} ${t1_sri24_warp}
	lockfile_delete ${out}
    fi
done

#
# 8 - reformat SRI24 tissue priors
#

priors=""
for tissue in CSF GM WM; do
    prior_tmp=${OUTDIR}/segment/priors/sri24_pbmap_${tissue}.nii
    prior_inp=${CMTK_DATA_DIR}/sri24/sri24_pbmap_${tissue}.nii

    if needs_update_and_lock ${prior_tmp} ${t1_sri24_warp}; then
	cmtk reformatx ${CMTK_GLOBAL_ARGS} --linear -o ${prior_tmp} --floating ${prior_inp} ${t1_brain} ${t1_sri24_warp}
	lockfile_delete ${prior_tmp}
    fi

    if [ -e ${prior_tmp}.gz ]; then
	priors+=" ${prior_tmp}.gz"
    else
	priors+=" ${prior_tmp}"
    fi
done

#
# 9 - tissue classification
#

[ -d ${OUTDIR}/segment ] || mkdir -p ${OUTDIR}/segment

t1_seg=${OUTDIR}/segment/t1_seg.nii
if needs_update_and_lock ${t1_seg} ${priors}; then
    fsl fast -A ${priors} -a ${FSLDIR}/src/flirt/flirtsch/ident.mat -P -v -o ${OUTDIR}/segment/t1 ${t1_brain}

    # remove again-reformatted priors
    rm ${OUTDIR}/segment/t1_*_stdspace.*

    lockfile_delete ${t1_seg}
fi
export t1_seg=`get_override_file ${t1_seg}`

#
# 10 - generate HTML summary
#

make_pngs()
{
    local inp=$1
    local stm=$2

    local triplanar_cmds="$3"

    local timestamp=${OUTDIR}/html/${stm}.ts
    if needs_update_and_lock ${timestamp} ${inp}; then
	if cmtk triplanar --exec load ${inp} ${triplanar_cmds} export-axial ${OUTDIR}/html/${stm}-ax.png export-sagittal ${OUTDIR}/html/${stm}-sa.png export-coronal ${OUTDIR}/html/${stm}-co.png; then
	    touch ${timestamp}
	fi
	lockfile_delete ${timestamp}
    fi

    png_timestamps+=" ${timestamp}"
}

png_timestamps=""
make_pngs ${INPUT_T1} t1
make_pngs ${INPUT_T2} t2

make_pngs ${t1_mrbias} t1_mrbias
make_pngs ${t2_mrbias} t2_mrbias

make_pngs ${t1_brain} t1_brain
make_pngs ${t1_skull} t1_skull
make_pngs ${t2_brain} t2_brain
make_pngs ${t2_skull} t2_skull

make_pngs ${t1_seg} t1_seg

for parc in ${PARCELLATIONS}; do
    make_pngs ${OUTDIR}/reformat/subject_t1/sri24_direct/${parc}.nii ${parc} "colormap Labels"
done

templ=${TEMPLATE_DIR}/structural_pipeline_index.html
html=${OUTDIR}/html/index.html
if needs_update_and_lock ${html} ${templ}; then
    cp ${templ} ${html}
    lockfile_delete ${html}
fi

#
# 11 - if pdflatex is installed, also create PDF summary
#

configure_file()
{
    local inp=$1
    local out=$2

    cat ${inp} | sed 's/\\\\/\\\\\\\\/g; s/\\/\\\\/g' | while read line; do
	eval echo \""$line"\"
    done > ${out}
}

if which pdflatex >& /dev/null; then
    latex=${TEMPLATE_DIR}/structural.tex
    pdf=${OUTDIR}/pdf/structural.pdf
    if needs_update_and_lock ${pdf} ${latex} ${png_timestamps}; then
	tmpdir=`mktemp -d`
	configure_file ${latex} ${tmpdir}/structural.tex
	TEXINPUTS="${OUTDIR}/html:.:" pdflatex -halt-on-error -output-directory ${tmpdir} ${tmpdir}/structural.tex >& /dev/null
	mv ${tmpdir}/structural.pdf ${pdf}
	rm -rf ${tmpdir}
	lockfile_delete ${pdf}
    fi
fi
